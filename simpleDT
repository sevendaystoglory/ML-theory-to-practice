{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sevendaystoglory/ML-theory-to-practice/blob/main/simpleDT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the required packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to import the dataset\n",
        "def importdata():\n",
        "    balance_data = pd.read_csv(\n",
        "        'https://archive.ics.uci.edu/ml/machine-learning-' +\n",
        "        'databases/balance-scale/balance-scale.data',\n",
        "        sep=',', header=None)\n",
        "\n",
        "    # Displaying dataset information\n",
        "    print(\"Dataset Length: \", len(balance_data))\n",
        "    print(\"Dataset Shape: \", balance_data.shape)\n",
        "    print(\"Dataset: \", balance_data.head())\n",
        "\n",
        "    return balance_data\n",
        "\n",
        "  # Function to split the dataset into features and target variables\n",
        "def splitdataset(balance_data):\n",
        "\n",
        "    # Separating the target variable\n",
        "    X = balance_data.values[:, 1:5]\n",
        "    Y = balance_data.values[:, 0]\n",
        "\n",
        "    # Splitting the dataset into train and test\n",
        "    X_train, X_test, y_train, y_test = train_test_split(\n",
        "        X, Y, test_size=0.3, random_state=100)\n",
        "\n",
        "    return X, Y, X_train, X_test, y_train, y_test\n",
        "\n",
        "X, Y, X_train, X_test, y_train, y_test = splitdataset(importdata())"
      ],
      "metadata": {
        "id": "G4CvmiE-mq-5",
        "outputId": "02e86fe2-11f5-4c32-c9da-e4ae954a4b57",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Length:  625\n",
            "Dataset Shape:  (625, 5)\n",
            "Dataset:     0  1  2  3  4\n",
            "0  B  1  1  1  1\n",
            "1  R  1  1  1  2\n",
            "2  R  1  1  1  3\n",
            "3  R  1  1  1  4\n",
            "4  R  1  1  1  5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from shutil import register_unpack_format\n",
        "class DecisionNode():\n",
        "  def __init__(self, threshold = 0, feature_axis = 0, majority_class = None):\n",
        "    self.feature_axis = feature_axis\n",
        "    self.threshold = threshold\n",
        "    self.left = None\n",
        "    self.right = None\n",
        "    self.majority_class = majority_class\n",
        "\n",
        "class DecisionTree():\n",
        "  def __init__(self, max_depth = 1):\n",
        "    self.max_depth = max_depth\n",
        "\n",
        "  def train_using_gini(self, X_train, y_train, depth = 0):\n",
        "    if len(X_train) == 0:\n",
        "      return None\n",
        "    if depth == self.max_depth or len(y_train) == 1:\n",
        "      unique_elements, counts = np.unique(y_train, return_counts=True)\n",
        "      majority_class = unique_elements[np.argmax(counts)]\n",
        "      return DecisionNode(majority_class = majority_class.item())\n",
        "    best_class = {'mini_gini' : 1, 'feature_axis' : 0, 'threshold' : 0}\n",
        "    for axis in range(len(X_train[0])):\n",
        "      thresholds = [row[axis] for row in X_train]\n",
        "      for threshold in thresholds:\n",
        "          gini = self._compute_weighted_gini(X_train, y_train, threshold, axis)\n",
        "          if gini < best_class['mini_gini']:\n",
        "              best_class['mini_gini'] = gini\n",
        "              best_class['feature_axis'] = axis\n",
        "              best_class['threshold'] = threshold\n",
        "\n",
        "    node = DecisionNode(best_class['threshold'], feature_axis=best_class['feature_axis'])\n",
        "    X_left = [x for x in X_train if x[best_class['feature_axis']] <= best_class['threshold']]\n",
        "    y_left = [y for x, y in zip(X_train, y_train) if x[best_class['feature_axis']] <= best_class['threshold']]\n",
        "    X_right = [x for x in X_train if x[best_class['feature_axis']] > best_class['threshold']]\n",
        "    y_right = [y for x, y in zip(X_train, y_train) if x[best_class['feature_axis']] > best_class['threshold']]\n",
        "\n",
        "    node.left = self.train_using_gini(X_left, y_left, depth=depth +1)\n",
        "    node.right = self.train_using_gini(X_right, y_right, depth=depth +1)\n",
        "    return(node)\n",
        "\n",
        "  def _compute_gini_impurity(self, labels):\n",
        "    unique_elements, counts = np.unique(labels, return_counts=True)\n",
        "    purity = 0\n",
        "    for p in counts:\n",
        "      purity += (p/len(labels))**2\n",
        "    return 1-purity\n",
        "\n",
        "  def _compute_weighted_gini(self, X, y, threshold, axis):\n",
        "      left_labels = [label for xi, label in zip(X, y) if xi[axis] <= threshold]\n",
        "      right_labels = [label for xi, label in zip(X, y) if xi[axis] > threshold]\n",
        "\n",
        "      l_len = len(left_labels)\n",
        "      r_len = len(right_labels)\n",
        "      total = l_len + r_len\n",
        "\n",
        "      if l_len == 0 or r_len == 0:\n",
        "          return 1  # Prevent useless splits\n",
        "\n",
        "      l_gini = self._compute_gini_impurity(left_labels)\n",
        "      r_gini = self._compute_gini_impurity(right_labels)\n",
        "\n",
        "      return (l_len / total) * l_gini + (r_len / total) * r_gini\n",
        "\n",
        "  def predict(self, node, x):\n",
        "    if node is not None:\n",
        "      if node.majority_class is not None:\n",
        "        return node.majority_class\n",
        "      if x[node.feature_axis] <= node.threshold:\n",
        "        return self.predict(node.left, x)\n",
        "      else:\n",
        "        return self.predict(node.right, x)\n",
        "    else:\n",
        "      return None"
      ],
      "metadata": {
        "id": "WWd0w0g5nEPm"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dt = DecisionTree(max_depth=20)\n",
        "root = dt.train_using_gini(X_train, y_train)"
      ],
      "metadata": {
        "id": "en10mL2DuRNb"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred = [dt.predict(root, x) for x in X_train]"
      ],
      "metadata": {
        "id": "vB9V-CVjwcaL"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred = np.array(pred)\n",
        "np.mean(np.array([(1 if pred[i] == y_train[i] else 0) for i in range(len(pred))]))"
      ],
      "metadata": {
        "id": "hKQYEfdq2Hpd",
        "outputId": "838f0f86-0038-402b-e06b-2ad0df205a50",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(1.0)"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_vals = [depth for depth in range(1,100)]\n",
        "y_vals = []\n",
        "for depth in range(1,100):\n",
        "  dt = DecisionTree(max_depth=depth)\n",
        "  root = dt.train_using_gini(X_train, y_train)\n",
        "  pred = [dt.predict(root, x) for x in X_test]\n",
        "  pred = np.array(pred)\n",
        "  acc = np.mean(np.array([(1 if pred[i] == y_test[i] else 0) for i in range(len(pred))]))\n",
        "  y_vals.append(acc)\n",
        "  print(depth)"
      ],
      "metadata": {
        "id": "5OkUmJlP5Kf8",
        "outputId": "44e2376c-f9c9-432c-c350-49800f78e7cd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n",
            "11\n",
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "16\n",
            "17\n",
            "18\n",
            "19\n",
            "20\n",
            "21\n",
            "22\n",
            "23\n",
            "24\n",
            "25\n",
            "26\n",
            "27\n",
            "28\n",
            "29\n",
            "30\n",
            "31\n",
            "32\n",
            "33\n",
            "34\n",
            "35\n",
            "36\n",
            "37\n",
            "38\n",
            "39\n",
            "40\n",
            "41\n",
            "42\n",
            "43\n",
            "44\n",
            "45\n",
            "46\n",
            "47\n",
            "48\n",
            "49\n",
            "50\n",
            "51\n",
            "52\n",
            "53\n",
            "54\n",
            "55\n",
            "56\n",
            "57\n",
            "58\n",
            "59\n",
            "60\n",
            "61\n",
            "62\n",
            "63\n",
            "64\n",
            "65\n",
            "66\n",
            "67\n",
            "68\n",
            "69\n",
            "70\n",
            "71\n",
            "72\n",
            "73\n",
            "74\n",
            "75\n",
            "76\n",
            "77\n",
            "78\n",
            "79\n",
            "80\n",
            "81\n",
            "82\n",
            "83\n",
            "84\n",
            "85\n",
            "86\n",
            "87\n",
            "88\n",
            "89\n",
            "90\n",
            "91\n",
            "92\n",
            "93\n",
            "94\n",
            "95\n",
            "96\n",
            "97\n",
            "98\n",
            "99\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(x_vals, y_vals)\n",
        "plt.xlabel('Depth')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Depth')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "aFRMswQm6N9G",
        "outputId": "300ed98c-ff33-4a26-990e-79cfe0f6739e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome to Colab",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}